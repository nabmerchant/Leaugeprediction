# -*- coding: utf-8 -*-
"""2mlpredict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ioGP28W767JFsU9R_G_W8m80ZUKsVW26
"""

import numpy as np
import pandas as pd

data1= pd.read_csv('/content/drive/MyDrive/sports dataset/results.csv')

data1

"""IT contains 2 seasons already i was asked to determine the winner of season 1. so dropping season id 2"""

data1 = data1.drop(data1[data1.SeasonID >1].index)
data1

"""first i created a column to make all home wins true and away or draw as false """

data1['winner of the match']= data1['HomeScore']>data1['AwayScore']
data1['draw']= data1['AwayScore']== data1['HomeScore']

"""i considered match won gets 3 points and draw gets 1 point. so i filtered the match winners in winner of match and draw is indicated as no winner. """

data1.loc[data1['winner of the match']==True ,'winner of the match']= 'home winner'
data1.loc[(data1['winner of the match']==False) & (data1['draw']==True) ,'winner of the match']= 'NO winner'
data1.loc[data1['winner of the match']==False ,'winner of the match']= 'away winner'
data1['goaldiffernce'] = data1['HomeScore'] - data1['AwayScore']
data1

import matplotlib.pyplot as plt
fig, chart = plt.subplots()
data = data1['winner of the match'].value_counts()
points = data.index
frequency = data.values
chart.bar(points, frequency)
chart.set_title('Frequency of different results ')
chart.set_xlabel('Result Type')
chart.set_ylabel('Frequency')

data1.drop(['draw'], axis=1)

import warnings
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.preprocessing import MinMaxScaler

warnings.filterwarnings("ignore")

clf_random = RandomForestClassifier()
clf_logistic = LogisticRegression()
clf_svm = svm.SVC()
clf_KNN = KNeighborsClassifier()




data2 = data1.drop(['SeasonID',	'Gameweek',	'draw','MatchID','winner of the match','goaldiffernce','HomeScore','AwayScore','HomeShots','AwayShots'], axis= 1)


x= data2


y = data1["winner of the match"]
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20)
param_grid = {
    'n_estimators': list(range(1,220, 20)),
    'max_depth': list(range(1,220, 20))
}

# Perform grid search on n_estimators and max_depth
gridsearch = GridSearchCV(estimator = clf_random, param_grid=param_grid, verbose=10, scoring='accuracy')
gridsearch.fit(X_train,y_train)

print('Best Score: ', gridsearch.best_score_)
print('Best Params: ', gridsearch.best_params_)





random_forest_list = []
regression_list = []
svm_list = []
knn_list = []


for i in range(1000):
    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20)
    
    clf_random.fit(X_train,y_train)
    clf_logistic.fit(X_train,y_train)
    clf_svm.fit(X_train,y_train)
    clf_KNN.fit(X_train,y_train)
    
    
    
    rdf = clf_random.predict(X_test)
    acc_random = accuracy_score(y_test,rdf)
    random_forest_list.append(acc_random)

    log = clf_logistic.predict(X_test)
    acc_log = accuracy_score(y_test,log)
    regression_list.append(acc_log)
    
    svm = clf_svm.predict(X_test)
    acc_svm = accuracy_score(y_test,svm)
    svm_list.append(acc_svm)
    
    knn = clf_KNN.predict(X_test)
    acc_knn = accuracy_score(y_test,knn)
    knn_list.append(acc_knn)

    

print("Random Forest Accuracy:", np.array(random_forest_list).mean(),np.array(random_forest_list).std())

print("Logistic Regression Accuracy:", np.array(regression_list).mean(),np.array(regression_list).std())

print("SVM Accuracy:", np.array(svm_list).mean(),np.array(svm_list).std())

print("KNN Accuracy:", np.array(knn_list).mean(),np.array(knn_list).std())

x

sec_season= pd.read_csv('/content/drive/MyDrive/sports dataset/fixtures.csv')
sec_season

xsecseason= sec_season.drop(['SeasonID','Gameweek','MatchID'],axis=1)
xsecseason

rdf = clf_random.predict(xsecseason)
rdf

sec_season['winners'] = rdf

fig, chart = plt.subplots()
data = sec_season['winners'].value_counts()
points = data.index
frequency = data.values
chart.bar(points, frequency)
chart.set_title('Frequency of different results ')
chart.set_xlabel('Result Type')
chart.set_ylabel('Frequency')

team_ids_list = list(set(sec_season['HomeTeamID'].tolist()))
for each_team_id in team_ids_list:
  sec_season[each_team_id]=0
sec_season.head(5)

def cal_points(row):
  if row['winners'] == 'home winner':
    row[row['HomeTeamID']]+=3
  elif row['winners'] == 'away winner':
    row[row['AwayTeamID']]+=3
  else:
    row[row['HomeTeamID']]+=1
    row[row['AwayTeamID']]+=1
  
  return row

sec_season= sec_season.apply(cal_points,axis=1)
sec_season.head(10)

sec_season['winners'][0]

groupby_agg = {id_: 'sum' for id_ in team_ids_list}
df_gameweek = sec_season.groupby(['Gameweek']).agg(groupby_agg).reset_index()
df_gameweek = df_gameweek.set_index('Gameweek')
df_gameweek.head(10)

df_gw_cum = df_gameweek.cumsum(axis = 0)
df_gw_cum.tail(10)

df_gw_cum.idxmax(axis=1)

"""15 miami is the winner of the leauge based on my model """

df= df_gw_cum.transpose()

df1 = df.loc[: ,54 ]

df2 = df1.to_frame()

teams = pd.read_csv('/content/drive/MyDrive/sports dataset/teams.csv')
teams['Gameweek'] = teams['TeamID']
arr = teams["TeamName"].to_numpy()
index = pd.Index(arr)
student_df = df2.set_index(index)
student_df.sort_values( by =[54],ascending = False)

from google.colab import drive
drive.mount('/content/drive')